// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="CIMCoreCR00804.001" type ="change">Remove Experimental
// from class.</
// <change cr="CIMCoreCR00820.003" type ="change'>Add the 
// ElementNameMask property to CIM_EnabledLogicalElementCapabilities.</change>
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// <change cr="CIMCoreCR00854" type ="change'>Corrected the
// typons in the description.</
// <change cr="CIMCoreCR00918" type="add">Add StateAwareness.</change>
// ==================================================================
//  CIM_EnabledLogicalElementCapabilities
// ==================================================================
   [Version ( "2.14.0" ), 
    UMLPackagePath ( "CIM::Core::Capabilities" ), 
    Description ( 
       "EnabledLogicalElementCapabilities describes the capabilities "
       "supported for changing the state of the assciated "
       "EnabledLogicalElement." )]
class CIM_EnabledLogicalElementCapabilities : CIM_Capabilities {

      [Description ( 
          "Boolean indicating whether the ElementName can be modified."
           ), 
       MappingStrings { 
          "FC-SWAPI.INCITS-T11|SWAPI_UNIT_CONFIG_CAPS_T|EditName" }, 
       ModelCorrespondence { "CIM_ManagedElement.ElementName" }]
   boolean ElementNameEditSupported;

      [Description ( "Maximum supported ElementName length." ), 
       MaxValue ( 256 ), 
       MappingStrings { 
          "FC-SWAPI.INCITS-T11|SWAPI_UNIT_CONFIG_CAPS_T|MaxNameChars" }, 
       ModelCorrespondence { 
          "CIM_FCSwitchCapabilities.ElementNameEditSupported" }]
   uint16 MaxElementNameLen;

      [Description ( 
          "RequestedStatesSupported indicates the possible states "
          "that can be requested when using the method "
          "RequestStateChange on the EnabledLogicalElement." ), 
       ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11" }, 
       Values { "Enabled", "Disabled", "Shut Down", "Offline", 
          "Test", "Defer", "Quiesce", "Reboot", "Reset" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange" }]
   uint16 RequestedStatesSupported[];

      [Experimental, Description ( 
          "This string expresses the restrictions on "
          "ElementName.The mask is expressed as a regular "
          "expression.See DMTF standard ABNF with the Profile Users "
          "Guide, appendix C for the regular expression syntax "
          "permitted. \n"
          "Since the ElementNameMask can describe the maximum "
          "lengthof the ElementName, then the requirements "
          "expressed in this property shall take precidence of any "
          "length expressed in MaxElementNameLen." )]
   string ElementNameMask;

      [Experimental, Description ( 
          "StateAwareness indicates support for modeling the state "
          "of the associated instance of CIM_EnabledLogicalElement. \n"
          "If StateAwareness contains the value 2 \"Implicit\", the "
          "RequestedState and TransitioningToState properties of "
          "the associated instance of CIM_EnabledLogicalElement "
          "shall provide information about state transitions that "
          "were initiated through a mechanism other than invocation "
          "of the RequestStateChange() method. \n"
          "If StateAwareness contains the value 3 "
          "\"RequestStateChange\", the RequestedState and "
          "TransitioningToState properties of the associated "
          "instance of CIM_EnabledLogicalElement shall provide "
          "information about state transitions initiated by "
          "invocation of the RequestStateChange() method. \n"
          "A value of NULL or an array that contains zero elements "
          "shall indicate the RequestedState and "
          "TransitioningToState properties will not reflect any "
          "transitions, irrespective of how they are initiated." ), 
       ValueMap { "2", "3" }, 
       Values { "Implicit", "RequestStateChange" }]
   uint16 StateAwareness[];


};
