// Copyright (c) 2008 DMTF.  All rights reserved.
   [Experimental, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Database::Sql" ), 
    Description ( 
       "An SQL <character set specification> allows a reference to a "
       "character set name defined by a standard, an "
       "SQLimplementation, \n"
       "or a user. A character set is described by a character set "
       "descriptor. A character set descriptor includes: \n"
       "- The name of the character set. \n"
       "- The name of the character repertoire for the character set. \n"
       "- The name of the character encoding form for the character "
       "set. \n"
       "- The name of the default collation for the character set. \n"
       "\n"
       "The following SQL supported character set names are specified "
       "as part of ISO/IEC 9075: \n"
       "- SQL_CHARACTER is a character set whose repertoire is "
       "SQL_CHARACTER and whose character encoding form is "
       "SQL_CHARACTER. The name of its default collation is "
       "SQL_CHARACTER. \n"
       "- GRAPHIC_IRV is a character set whose repertoire is "
       "GRAPHIC_IRV and whose character encoding form is GRAPHIC_IRV. "
       "The name of its default collation is GRAPHIC_IRV. \n"
       "- ASCII_GRAPHIC is a synonym for GRAPHIC_IRV. \n"
       "- LATIN1 is a character set whose repertoire is LATIN1 and "
       "whose character encoding form is LATIN1. The name of its "
       "default collation is LATIN1. \n"
       "- ISO8BIT is a character set whose repertoire is ISO8BIT and "
       "whose character encoding form is ISO8BIT. The name of its "
       "default collation is ISO8BIT. \n"
       "- ASCII_FULL is a synonym for ISO8BIT. \n"
       "- UTF32 is a character set whose repertoire is UCS and whose "
       "character encoding form is UTF32. It is implementation-defined "
       "whether the name of its default collation is UCS_BASIC or "
       "UNICODE. \n"
       "- UTF16 is a character set whose repertoire is UCS and whose "
       "character encoding form is UTF16. It is implementation-defined "
       "whether the name of its default collation is UCS_BASIC or "
       "UNICODE. \n"
       "- UTF8 is the name of a character set whose repertoire is UCS "
       "and whose character encoding form is UTF8. It is "
       "implementation -defined whether the name of its default "
       "collation is UCS_BASIC or UNICODE. \n"
       "- SQL_TEXT is a character set whose repertoire is SQL_TEXT and "
       "whose character encoding form is SQL_TEXT. The name of its "
       "default collation is SQL_TEXT. \n"
       "- SQL_IDENTIFIER is a character set whose repertoire is "
       "SQL_IDENTIFIER and whose character encoding form is "
       "SQL_IDENTIFIER. The name of its default collation is "
       "SQL_IDENTIFIER. \n"
       "\n"
       "A UCS string is a character string whose character repertoire "
       "is UCS and whose character encoding form is one of UTF8, "
       "UTF16, or UTF32. Any two UCS strings are comparable. \n"
       "An SQL-implementation may assume that all UCS strings are "
       "normalized in Normalization Form C (NFC), as specified by "
       "[Unicode15]. With the exception of <normalize function> and "
       "<normalized predicate> , the result of any operation on an "
       "unnormalized UCS string is implementation-defined. \n"
       "\n"
       "Conversion of UCS strings from one character set to another is "
       "automatic. Detection of a noncharacter in a UCS-string causes "
       "an exception condition to be raised. The detection of an "
       "unassigned code point does not." )]
class CIM_SqlCharacterSet : CIM_LogicalElement {

      [Description ( 
          "The name of the character encoding form for the character set."
           )]
   string CharacterEncoding;

      [Description ( 
          "The name of the character repertoire for the character set."
           )]
   string CharacterRepertoir;

      [Description ( 
          "The name of the default collation for the character set." )]
   string DefaultCollation;

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority. (This is "
          "similar to the <Schema Name>_<Class Name> structure of "
          "Schema class names.) In addition, to ensure uniqueness "
          "<OrgID> MUST NOT contain a colon (\':\'). When using "
          "this algorithm, the first colon to appear in InstanceID "
          "MUST appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceId;


};
