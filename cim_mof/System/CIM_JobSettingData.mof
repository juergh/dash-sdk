// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// ==================================================================
//  CIM_JobSettingData 
// ==================================================================
   [Version ( "2.9.1000" ), 
    UMLPackagePath ( "CIM::System::Processing" ), 
    Description ( 
       "JobSettingData represents job characteristics and scheduling "
       "information for a CIM_Job. The settings may be applied to a "
       "job handling Service, a JobQueue or other destination to which "
       "jobs are submitted, and/or to individual CIM_Jobs. The "
       "applicability of the settings are defined using the "
       "ElementSettingData relationship. Since the Settings may be "
       "defined in several contexts and applied to many types of "
       "elements, this class is defined as a subclass of SettingData, "
       "versus ScopedSettingData." )]
class CIM_JobSettingData : CIM_SettingData {

      [Experimental, Write, Description ( 
          "Number of times that a Job should be run. A value of 1 "
          "indicates that the Job is NOT recurring, while any "
          "non-zero value indicates a limit to the number of times "
          "that the Job will recur. Zero indicates that there is no "
          "limit to the number of times that the Job can be "
          "processed, but that it is terminated either AFTER the "
          "UntilTime, or by manual intervention. By default, a Job "
          "is processed once." ), 
       ModelCorrespondence { "CIM_Job.JobRunTimes" }]
   uint32 JobRunTimes = 1;

      [Experimental, Write, Description ( 
          "The month during which a Job should be processed. "
          "Specify 0 for January, 1 for February, and so on." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11" }, 
       Values { "January", "February", "March", "April", "May", 
          "June", "July", "August", "September", "October", 
          "November", "December" }, 
       ModelCorrespondence { "CIM_Job.RunMonth", 
          "CIM_JobSettingData.RunDay", 
          "CIM_JobSettingData.RunDayOfWeek", 
          "CIM_JobSettingData.RunStartInterval" }]
   uint8 RunMonth;

      [Experimental, Write, Description ( 
          "The day in the month on which a Job should be processed. "
          "There are two different interpretations for this "
          "property, depending on the value of RunDayOfWeek. In one "
          "case, RunDay defines the day-in-month on which the Job "
          "is processed. This interpretation is used when the "
          "RunDayOfWeek is 0. A positive or negative integer "
          "indicates whether the RunDay should be calculated from "
          "the beginning or the end of the month. For example, 5 "
          "indicates the fifth day in RunMonth and -1 indicates the "
          "last day in the RunMonth. \n"
          "\n"
          "When RunDayOfWeek is not 0, RunDay is the day-in-month "
          "on which the Job is processed, defined in conjunction "
          "with RunDayOfWeek. For example, if RunDay is 15 and "
          "RunDayOfWeek is Saturday, then the Job is processed on "
          "the first Saturday on or AFTER the 15th day in the "
          "RunMonth (e.g., the third Saturday in the month). If "
          "RunDay is 20 and RunDayOfWeek is -Saturday, then this "
          "indicates the first Saturday on or BEFORE the 20th day "
          "in the RunMonth. If RunDay is -1 and RunDayOfWeek is "
          "-Sunday, then this indicates the last Sunday in the "
          "RunMonth." ), 
       MinValue ( -31 ), 
       MaxValue ( 31 ), 
       ModelCorrespondence { "CIM_Job.RunDay", 
          "CIM_JobSettingData.RunMonth", 
          "CIM_JobSettingData.RunDayOfWeek", 
          "CIM_JobSettingData.RunStartInterval" }]
   sint8 RunDay;

      [Experimental, Write, Description ( 
          "Positive or negative integer used in conjunction with "
          "RunDay to indicate the day of the week on which a Job is "
          "processed. RunDayOfWeek is set to 0 to indicate an exact "
          "day of the month, such as March 1. A positive integer "
          "(representing Sunday, Monday, ..., Saturday) means that "
          "the day of week is found on or AFTER the specified "
          "RunDay. A negative integer (representing -Sunday, "
          "-Monday, ..., -Saturday) means that the day of week is "
          "found on or BEFORE the RunDay." ), 
       ValueMap { "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", 
          "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "-Saturday", "-Friday", "-Thursday", "-Wednesday", 
          "-Tuesday", "-Monday", "-Sunday", "ExactDayOfMonth", 
          "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", 
          "Friday", "Saturday" }, 
       ModelCorrespondence { "CIM_Job.RunDayOfWeek", 
          "CIM_JobSettingData.RunMonth", 
          "CIM_JobSettingData.RunDay", 
          "CIM_JobSettingData.RunStartInterval" }]
   sint8 RunDayOfWeek;

      [Experimental, Write, Description ( 
          "The time interval after midnight when a Job should be "
          "processed. For example, \n"
          "00000000020000.000000:000 \n"
          "indicates that the Job should be run on or after two "
          "o\'clock, local time or UTC time (distinguished using "
          "the LocalOrUtcTime property." ), 
       ModelCorrespondence { "CIM_Job.RunStartInterval", 
          "CIM_JobSettingData.RunMonth", 
          "CIM_JobSettingData.RunDay", 
          "CIM_JobSettingData.RunDayOfWeek", 
          "CIM_JobSettingData.LocalOrUtcTime" }]
   datetime RunStartInterval;

      [Experimental, Write, Description ( 
          "This property indicates whether the times represented in "
          "the RunStartInterval and UntilTime properties represent "
          "local times or UTC times. Time values are synchronized "
          "worldwide by using the enumeration value 2, \"UTC Time\"." ), 
       ValueMap { "1", "2" }, 
       Values { "Local Time", "UTC Time" }]
   uint16 LocalOrUtcTime;

      [Experimental, Write, Description ( 
          "The setting for a Job\'s UntilTime - the time after "
          "which an executing Job should be stopped or not be "
          "allowed to proceed. This may be represented by an actual "
          "date and time, or an interval relative to the "
          "ScheduledStartTime. A value of all nines indicates that "
          "the Job can run indefinitely." ), 
       ModelCorrespondence { "CIM_Job.UntilTime", 
          "CIM_JobSettingData.LocalOrUtcTime" }]
   datetime UntilTime;

      [Experimental, Write, Description ( 
          "The setting for a Job\'s Notify property - the "
          "user/email to be notified upon a scheduled Job\'s "
          "completion or failure." ), 
       ModelCorrespondence { "CIM_Job.Notify" }]
   string Notify;

      [Experimental, Write, Description ( 
          "The setting for a Job\'s Owner property - the user, "
          "service method, etc. that defined this setting data and "
          "causes the Job to be created." ), 
       ModelCorrespondence { "CIM_Job.Owner" }]
   string Owner;

      [Experimental, Write, Description ( 
          "Indicates the urgency or importance of execution of the "
          "Job, as specified by the user or defining entity. The "
          "actual Priority is found in the CIM_Job instance, "
          "associated via the ElementSettingData relationship. "
          "Unless otherwise specified, a lower number indicates a "
          "higher priority." ), 
       ModelCorrespondence { "CIM_Job.Priority" }]
   uint32 Priority;

      [Write, Description ( 
          "Indicates whether or not the Job should be automatically "
          "deleted upon completion. Note that the \'completion\' of "
          "a recurring job is defined by its JobRunTimes or "
          "UntilTime properties, OR when the Job is terminated by "
          "manual intervention." ), 
       ModelCorrespondence { "CIM_Job.DeleteOnCompletion" }]
   boolean DeleteOnCompletion;

      [Description ( 
          "Describes the recovery setting if the Job does not "
          "successfully complete. The possible values are: \n"
          "0 = \"Unknown\", meaning it is unknown as to what "
          "recovery action to take \n"
          "1 = \"Other\", indicating that the recovery action will "
          "be specified in the property, OtherRecoveryAction \n"
          "2 = \"Do Not Continue\", meaning stop the execution of "
          "the job and appropriately update its status \n"
          "3 = \"Continue With Next Job\", meaning continue with "
          "the next job in the queue \n"
          "4 = \"Re-run Job\", indicating that the job should be "
          "re-run \n"
          "5 = \"Run Recovery Job\", meaning run the Job associated "
          "using the RecoveryJob relationship. Note that the "
          "recovery Job MUST already be on the queue from which it "
          "will run." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Do Not Continue", 
          "Continue With Next Job", "Re-run Job", "Run Recovery Job" }, 
       ModelCorrespondence { 
          "CIM_JobSettingData.OtherRecoveryAction", 
          "CIM_Job.RecoveryAction" }]
   uint16 RecoveryAction;

      [Description ( 
          "A string describing the recovery action when the "
          "instance\'s RecoveryAction property is 1 (\"Other\")." ), 
       ModelCorrespondence { "CIM_JobSettingData.RecoveryAction", 
          "CIM_Job.OtherRecoveryAction" }]
   string OtherRecoveryAction;


};
