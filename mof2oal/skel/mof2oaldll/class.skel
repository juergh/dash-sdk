#ifdef _DEBUG
#include <assert.h>
#endif
#include <dsdk/oal/%CLASSNAME%.h>
using namespace std;
using namespace dsdk;

namespace wrapperCpp {

	extern "C" SDKWRAPPER_Export int %CLASSNAME%_get(dsdk::IClient* client, oaldllarg* t);

	int %CLASSNAME%_get(IClient* client, oaldllarg* t) {
			if (client == NULL || t == NULL) 
				return PP_ERR;

			try {
				vector<string> props = %SUPERCLASSNAME%::getKeyProps();
		
				vector<void*> classes;
				%CLASSNAME%::iterator iter = %CLASSNAME%::enumInstances(client, 0, props);
				for (; iter != %CLASSNAME%::iterator::end(); ++iter) {
					classes.push_back((void*)new %CLASSNAME%(*iter));
				}
				return vec2ser(classes, t);
			} catch (dsdk::EDSDKError& e) {
				unsigned int f = e.getErrorCode();
#ifdef _DEBUG
				assert(f != PP_OK && f != PP_ERR);
#endif
				return f;
			}
	}

	extern "C" SDKWRAPPER_Export void %CLASSNAME%_delete(COALObject *_d);

	void %CLASSNAME%_delete(COALObject *_d) {
		if (_d == NULL) 
			return;
		%CLASSNAME%* _c = dynamic_cast<%CLASSNAME%*>(_d);
		if (_c == NULL)
			return;
		delete _c;
	}

	extern "C" SDKWRAPPER_Export int %CLASSNAME%_getKeyProps(COALObject *_d, oaldllarg* t);

	int %CLASSNAME%_getKeyProps (COALObject *_d, oaldllarg* t) 
	{
			if (_d == NULL || t == NULL) 
				return PP_ERR;

			try {
				%CLASSNAME%* _c = dynamic_cast<%CLASSNAME%*>(_d);
				if (_c == NULL)
					return PP_ERR;
				
				%CLASSNAME% c = *_c;

				vector<string> key = c.getKeyProps();

				if (vec2ser(key, t) != PP_OK)
					return PP_ERR;
				return PP_OK;
			} catch (dsdk::EDSDKError& e) {
				unsigned int f = e.getErrorCode();
#ifdef _DEBUG
				assert(f != PP_OK && f != PP_ERR);
#endif
				return f;
			}
	}

	extern "C" SDKWRAPPER_Export int %CLASSNAME%_tryCast(COALObject *_b, oaldllarg* t);

	int %CLASSNAME%_tryCast (COALObject *_b, oaldllarg* t) 
	{
			vector<void*> classes;

			if (_b == NULL || t == NULL) 
				return PP_ERR;

			%CLASSNAME%* d = dynamic_cast<%CLASSNAME%*>(_b);

			if (d == NULL)
				return PP_ERR;

			classes.push_back((void*)d);

			if (vec2ser(classes, t) != PP_OK)
				return PP_ERR;

			return PP_OK;
	}

	/*------------- Properties ---------------*/

%PROPERTIES%

	/*------------- Methods -------------------*/

%METHODS%

}
